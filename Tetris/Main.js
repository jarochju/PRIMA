"use strict";
var Tetris;
(function (Tetris) {
    var ƒ = FudgeCore;
    window.addEventListener("load", hndLoad);
    let form;
    function hndLoad(_event) {
        const canvas = document.querySelector("canvas");
        form = new Tetris.Form();
        let r = Math.random();
        let p = 1 / 7;
        let rx = Math.floor(Math.random() * 14) - 7;
        let y = 10;
        let pos = new ƒ.Vector3(rx * form.unit, y * form.unit, 0);
        if (r > p * 6)
            form.createLN(pos);
        else if (r > p * 5)
            form.createLL(pos);
        else if (r > p * 4)
            form.createLR(pos);
        else if (r > p * 3)
            form.createZL(pos);
        else if (r > p * 2)
            form.createZR(pos);
        else if (r > p * 1)
            form.createSQ(pos);
        else if (r > p * 0)
            form.createTT(pos);
        let cmpCamera = new ƒ.ComponentCamera();
        cmpCamera.pivot.translateZ(25);
        cmpCamera.pivot.rotateY(180);
        Tetris.viewport = new ƒ.Viewport();
        Tetris.viewport.initialize("Viewport", form, cmpCamera, canvas);
        document.addEventListener("keypress", control);
        ƒ.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        ƒ.Loop.start(ƒ.LOOP_MODE.TIME_REAL, 1);
    }
    function update(_event) {
        Tetris.viewport.draw();
        form.moveY();
    }
    function control(_event) {
        let direction;
        direction = ƒ.Keyboard.mapToValue(ƒ.Vector3.X(), ƒ.Vector3.ZERO(), ([ƒ.KEYBOARD_CODE.D, ƒ.KEYBOARD_CODE.ARROW_RIGHT]));
        direction.add(ƒ.Keyboard.mapToValue(ƒ.Vector3.X(-1), ƒ.Vector3.ZERO(), [ƒ.KEYBOARD_CODE.A, ƒ.KEYBOARD_CODE.ARROW_LEFT]));
        form.moveX(direction);
        Tetris.viewport.draw();
    }
})(Tetris || (Tetris = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQVUsTUFBTSxDQTJEZjtBQTNERCxXQUFVLE1BQU07SUFDZCxJQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7SUFFckIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV6QyxJQUFJLElBQVUsQ0FBQztJQUVmLFNBQVMsT0FBTyxDQUFDLE1BQWE7UUFDNUIsTUFBTSxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbkUsSUFBSSxHQUFHLElBQUksT0FBQSxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBVyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLEdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLEVBQUUsR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLEdBQVcsRUFBRSxDQUFDO1FBQ25CLElBQUksR0FBRyxHQUFjLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxTQUFTLEdBQXNCLElBQUksQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzNELFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdCLE9BQUEsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVCLE9BQUEsUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV6RCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRS9DLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLCtCQUFxQixNQUFNLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsU0FBUyxNQUFNLENBQUMsTUFBZ0I7UUFDOUIsT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFaEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVMsT0FBTyxDQUFDLE1BQWE7UUFDNUIsSUFBSSxTQUFvQixDQUFDO1FBRXpCLFNBQVMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZILFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekgsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QixPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQixDQUFDO0FBQ0gsQ0FBQyxFQTNEUyxNQUFNLEtBQU4sTUFBTSxRQTJEZiIsInNvdXJjZXNDb250ZW50IjpbIm5hbWVzcGFjZSBUZXRyaXMge1xyXG4gIGltcG9ydCDGkiA9IEZ1ZGdlQ29yZTtcclxuXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGhuZExvYWQpO1xyXG4gIGV4cG9ydCBsZXQgdmlld3BvcnQ6IMaSLlZpZXdwb3J0O1xyXG4gIGxldCBmb3JtOiBGb3JtO1xyXG5cclxuICBmdW5jdGlvbiBobmRMb2FkKF9ldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiY2FudmFzXCIpO1xyXG5cclxuICAgIGZvcm0gPSBuZXcgRm9ybSgpO1xyXG4gICAgbGV0IHI6IG51bWJlciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICBsZXQgcDogbnVtYmVyID0gMSAvIDc7XHJcbiAgICBsZXQgcng6IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE0KSAtIDc7XHJcbiAgICBsZXQgeTogbnVtYmVyID0gMTA7XHJcbiAgICBsZXQgcG9zOiDGki5WZWN0b3IzID0gbmV3IMaSLlZlY3RvcjMocnggKiBmb3JtLnVuaXQsIHkgKiBmb3JtLnVuaXQsIDApO1xyXG4gICAgaWYgKHIgPiBwICogNilcclxuICAgICAgZm9ybS5jcmVhdGVMTihwb3MpO1xyXG4gICAgZWxzZSBpZiAociA+IHAgKiA1KVxyXG4gICAgICBmb3JtLmNyZWF0ZUxMKHBvcyk7XHJcbiAgICBlbHNlIGlmIChyID4gcCAqIDQpXHJcbiAgICAgIGZvcm0uY3JlYXRlTFIocG9zKTtcclxuICAgIGVsc2UgaWYgKHIgPiBwICogMylcclxuICAgICAgZm9ybS5jcmVhdGVaTChwb3MpO1xyXG4gICAgZWxzZSBpZiAociA+IHAgKiAyKVxyXG4gICAgICBmb3JtLmNyZWF0ZVpSKHBvcyk7XHJcbiAgICBlbHNlIGlmIChyID4gcCAqIDEpXHJcbiAgICAgIGZvcm0uY3JlYXRlU1EocG9zKTtcclxuICAgIGVsc2UgaWYgKHIgPiBwICogMClcclxuICAgICAgZm9ybS5jcmVhdGVUVChwb3MpO1xyXG5cclxuICAgIGxldCBjbXBDYW1lcmE6IMaSLkNvbXBvbmVudENhbWVyYSA9IG5ldyDGki5Db21wb25lbnRDYW1lcmEoKTtcclxuICAgIGNtcENhbWVyYS5waXZvdC50cmFuc2xhdGVaKDI1KTtcclxuICAgIGNtcENhbWVyYS5waXZvdC5yb3RhdGVZKDE4MCk7XHJcblxyXG4gICAgdmlld3BvcnQgPSBuZXcgxpIuVmlld3BvcnQoKTtcclxuICAgIHZpZXdwb3J0LmluaXRpYWxpemUoXCJWaWV3cG9ydFwiLCBmb3JtLCBjbXBDYW1lcmEsIGNhbnZhcyk7XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGNvbnRyb2wpO1xyXG5cclxuICAgIMaSLkxvb3AuYWRkRXZlbnRMaXN0ZW5lcijGki5FVkVOVC5MT09QX0ZSQU1FLCB1cGRhdGUpO1xyXG4gICAgxpIuTG9vcC5zdGFydCjGki5MT09QX01PREUuVElNRV9SRUFMLCAxKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZShfZXZlbnQ6IMaSLkV2ZW50xpIpOiB2b2lkIHtcclxuICAgIHZpZXdwb3J0LmRyYXcoKTtcclxuXHJcbiAgICBmb3JtLm1vdmVZKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb250cm9sKF9ldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgIGxldCBkaXJlY3Rpb246IMaSLlZlY3RvcjM7XHJcbiAgICBcclxuICAgIGRpcmVjdGlvbiA9IMaSLktleWJvYXJkLm1hcFRvVmFsdWUoxpIuVmVjdG9yMy5YKCksIMaSLlZlY3RvcjMuWkVSTygpLCAoW8aSLktFWUJPQVJEX0NPREUuRCwgxpIuS0VZQk9BUkRfQ09ERS5BUlJPV19SSUdIVF0pKTtcclxuICAgIGRpcmVjdGlvbi5hZGQoxpIuS2V5Ym9hcmQubWFwVG9WYWx1ZSjGki5WZWN0b3IzLlgoLTEpLCDGki5WZWN0b3IzLlpFUk8oKSwgW8aSLktFWUJPQVJEX0NPREUuQSwgxpIuS0VZQk9BUkRfQ09ERS5BUlJPV19MRUZUXSkpO1xyXG5cclxuICAgIGZvcm0ubW92ZVgoZGlyZWN0aW9uKTtcclxuICAgIHZpZXdwb3J0LmRyYXcoKTtcclxuICB9XHJcbn0iXX0=