"use strict";
var Tetris;
(function (Tetris) {
    var ƒ = FudgeCore;
    class Form extends ƒ.Node {
        constructor() {
            super("Form");
            this.unit = 1.05;
            this.dirY = ƒ.Vector3.Y(-this.unit);
            this.color = ƒ.Color.CSS("WHITE");
            this.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(ƒ.Vector3.ZERO())));
        }
        moveY() {
            let transform = this.getComponent(ƒ.ComponentTransform);
            let matrix = transform.local.copy;
            matrix.translate(this.dirY);
            this.removeComponent(transform);
            this.addComponent(new ƒ.ComponentTransform(matrix));
        }
        moveX(dirX) {
            dirX.scale(this.unit);
            let transform = this.getComponent(ƒ.ComponentTransform);
            let matrix = transform.local.copy;
            matrix.translate(dirX);
            this.removeComponent(transform);
            this.addComponent(new ƒ.ComponentTransform(matrix));
        }
        createLN(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("CYAN");
            this.createLine(4, pos);
        }
        createLL(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("MAGENTA");
            this.createLine(3, pos);
            this.createQuad(new ƒ.Vector3(-this.unit + pos.x, this.unit + pos.y, 0 + pos.z));
        }
        createLR(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("YELLOW");
            this.createLine(3, pos);
            this.createQuad(new ƒ.Vector3(this.unit + pos.x, this.unit + pos.y, 0 + pos.z));
        }
        createZL(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("RED");
            this.createLine(2, new ƒ.Vector3(this.unit + pos.x, 0 + pos.y, 0 + pos.z));
            this.createLine(2, new ƒ.Vector3(0 + pos.x, 0 + this.unit + pos.y, 0 + pos.z));
        }
        createZR(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("GREEN");
            this.createLine(2, new ƒ.Vector3(0 + pos.x, 0 + pos.y, 0 + pos.z));
            this.createLine(2, new ƒ.Vector3(this.unit + pos.x, 0 + this.unit + pos.y, 0 + pos.z));
        }
        createSQ(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("BLUE");
            this.createLine(2, new ƒ.Vector3(0 + pos.x, 0 + pos.y, 0 + pos.z));
            this.createLine(2, new ƒ.Vector3(0 + pos.x, 0 + this.unit + pos.y, 0 + pos.z));
        }
        createTT(pos = ƒ.Vector3.ZERO()) {
            this.color = ƒ.Color.CSS("ORANGE");
            this.createLine(3, pos);
            this.createQuad(new ƒ.Vector3(0 + pos.x, 0 + this.unit + pos.y, 0 + pos.z));
        }
        createLine(len, pos = ƒ.Vector3.ZERO()) {
            while (len-- > 0)
                this.createQuad(new ƒ.Vector3(this.unit * len - this.unit + pos.x, 0 + pos.y, 0 + pos.z));
        }
        createQuad(pos) {
            let mesh = new ƒ.MeshQuad();
            let material = new ƒ.Material("Solid" + this.color.getCSS(), ƒ.ShaderUniColor, new ƒ.CoatColored(this.color));
            let segment = new ƒ.Node("Segment");
            let cmpMesh = new ƒ.ComponentMesh(mesh);
            segment.addComponent(cmpMesh);
            let cmpMaterial = new ƒ.ComponentMaterial(material);
            segment.addComponent(cmpMaterial);
            segment.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(pos)));
            this.appendChild(segment);
        }
    }
    Tetris.Form = Form;
})(Tetris || (Tetris = {}));
//# sourceMappingURL=data:application/json;base64,