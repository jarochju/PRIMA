"use strict";
var Tetris;
(function (Tetris) {
    var ƒ = FudgeCore;
    class Shape extends ƒ.Node {
        static staticUnit = 1.05;
        unit = Shape.staticUnit;
        color = ƒ.Color.CSS("WHITE");
        container;
        constructor(startPos = ƒ.Vector3.ZERO()) {
            super("Shape");
            startPos.scale(this.unit);
            this.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(startPos)));
            this.container = new ƒ.Node("Shape_Container");
            this.container.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(ƒ.Vector3.ZERO())));
            this.appendChild(this.container);
        }
        static random() {
            let r = Math.random();
            let p = 1 / 7;
            let rx = Math.floor(Math.random() * 12) - 6;
            let y = 10;
            const form = new Shape(new ƒ.Vector3(rx, y, 0));
            if (r > p * 6)
                form.createLN();
            else if (r > p * 5)
                form.createLL();
            else if (r > p * 4)
                form.createLR();
            else if (r > p * 3)
                form.createZL();
            else if (r > p * 2)
                form.createZR();
            else if (r > p * 1)
                form.createSQ();
            else if (r > p * 0)
                form.createTT();
            return form;
        }
        static floor(len, pos = ƒ.Vector3.ZERO()) {
            let form = new Shape(pos);
            form.createLine(len, ƒ.Vector3.ZERO());
            return form;
        }
        static wall(len, pos = ƒ.Vector3.ZERO()) {
            let form = new Shape(pos);
            while (len-- > 0)
                form.createQuad(new ƒ.Vector3(0, form.unit * len - form.unit, 0));
            return form;
        }
        get position() {
            return this.mtxWorld.translation;
        }
        /** Versuche Form um einen Schritt nach unten zu bewegen */
        tryMoveY(colliders) {
            // Kalkuliere Translation um eine Einheit nach unten
            const downMtx = this.mtxLocal.copy;
            downMtx.translateY(-this.unit);
            // speichere Rotation des Form-Containers
            const cRotation = this.container.mtxLocal.rotation.z;
            // Iteriere über jedes Segment einer Form und simuliere eine Translaton nach unten (Weltkoordinatensystem)
            for (const segment of this.container.getChildren()) {
                // Erstelle Matrixkopie des Segments
                const segmentMtx = segment.mtxWorld.copy;
                // Prüfe andhand der Container-Rotation in welche Richtung das Segment bewegt werden muss.
                // Führe daraufhin die Translation durch. (Funktioniert da immer in 90 Grad Schritten gedreht wird :D)
                if (cRotation === 90)
                    segmentMtx.translateX(-this.unit);
                else if (cRotation === -90)
                    segmentMtx.translateX(this.unit);
                else if (cRotation === -180 || cRotation === 180)
                    segmentMtx.translateY(this.unit);
                else
                    segmentMtx.translateY(-this.unit);
                // Prüfe ob die transformierten Segmentkopien mit den Collidern kollidieren
                for (const collider of colliders) {
                    for (const other of collider.container.getChildren()) {
                        const otherTrans = other.mtxWorld.translation;
                        if (!segmentMtx.translation.equals(ƒ.Vector3.ZERO()) &&
                            segmentMtx.translation.isInsideSphere(otherTrans, this.unit / 2)) {
                            // tue nichts, Form ist bereits am Boden
                            return false;
                        }
                    }
                }
            }
            // Wird ausgeführt wenn nicht kollidiert. Führe deshalb eine Translation der Form nach unten aus.
            this.cmpTransform.mtxLocal = downMtx;
            return true;
        }
        moveX(dirX) {
            dirX.scale(this.unit);
            this.mtxLocal?.translate(dirX);
        }
        rotateZ(dir) {
            this.container?.mtxLocal?.rotateZ(dir * 90);
        }
        createLine(len, pos = ƒ.Vector3.ZERO()) {
            while (len-- > 0)
                this.createQuad(new ƒ.Vector3(this.unit * len - this.unit + pos.x, 0 + pos.y, 0 + pos.z));
        }
        createLN() {
            this.color = ƒ.Color.CSS("CYAN");
            this.createLine(4, ƒ.Vector3.ZERO());
        }
        createLL() {
            this.color = ƒ.Color.CSS("MAGENTA");
            this.createLine(3);
            this.createQuad(new ƒ.Vector3(-this.unit, this.unit, 0));
        }
        createLR() {
            this.color = ƒ.Color.CSS("YELLOW");
            this.createLine(3);
            this.createQuad(new ƒ.Vector3(this.unit, this.unit, 0));
        }
        createZL() {
            this.color = ƒ.Color.CSS("RED");
            this.createLine(2, new ƒ.Vector3(this.unit, 0, 0));
            this.createLine(2, new ƒ.Vector3(0, 0 + this.unit, 0));
        }
        createZR() {
            this.color = ƒ.Color.CSS("GREEN");
            this.createLine(2);
            this.createLine(2, new ƒ.Vector3(this.unit, 0 + this.unit, 0));
        }
        createSQ() {
            this.color = ƒ.Color.CSS("BLUE");
            this.createLine(2);
            this.createLine(2, new ƒ.Vector3(0, this.unit, 0));
        }
        createTT() {
            this.color = ƒ.Color.CSS("ORANGE");
            this.createLine(3);
            this.createQuad(new ƒ.Vector3(0, 0 + this.unit, 0));
        }
        createQuad(pos) {
            let mesh = new ƒ.MeshQuad();
            let material = new ƒ.Material("Solid" + this.color.getCSS(), ƒ.ShaderUniColor, new ƒ.CoatColored(this.color));
            let segment = new ƒ.Node("Segment");
            let cmpMesh = new ƒ.ComponentMesh(mesh);
            segment.addComponent(cmpMesh);
            let cmpMaterial = new ƒ.ComponentMaterial(material);
            segment.addComponent(cmpMaterial);
            segment.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(pos)));
            this.container.appendChild(segment);
        }
    }
    Tetris.Shape = Shape;
})(Tetris || (Tetris = {}));
//# sourceMappingURL=data:application/json;base64,