"use strict";
var Tetris;
(function (Tetris) {
    var ƒ = FudgeCore;
    class Form extends ƒ.Node {
        constructor(startPos = ƒ.Vector3.ZERO()) {
            super('Form');
            this.unit = Form.staticUnit;
            this.color = ƒ.Color.CSS('WHITE');
            startPos.scale(this.unit);
            this.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(startPos)));
            this.container = new ƒ.Node('Form_Container');
            this.container.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(ƒ.Vector3.ZERO())));
            this.appendChild(this.container);
        }
        static random() {
            let r = Math.random();
            let p = 1 / 7;
            let rx = Math.floor(Math.random() * 12) - 6;
            let y = 10;
            let form = new Form(new ƒ.Vector3(rx, y, 0));
            if (r > p * 6)
                form.createLN();
            else if (r > p * 5)
                form.createLL();
            else if (r > p * 4)
                form.createLR();
            else if (r > p * 3)
                form.createZL();
            else if (r > p * 2)
                form.createZR();
            else if (r > p * 1)
                form.createSQ();
            else if (r > p * 0)
                form.createTT();
            return form;
        }
        static floor(len, pos = ƒ.Vector3.ZERO()) {
            let form = new Form(pos);
            form.createLine(len, ƒ.Vector3.ZERO());
            return form;
        }
        static wall(len, pos = ƒ.Vector3.ZERO()) {
            let form = new Form(pos);
            while (len-- > 0)
                form.createQuad(new ƒ.Vector3(0, form.unit * len - form.unit, 0));
            0;
            return form;
        }
        get position() {
            return this.mtxWorld.translation;
        }
        tryMoveY(colliders) {
            // get local copy of local matrix
            // const localMtxCopy = this.mtxLocal.copy;
            const worldMtxCopy = this.mtxWorld.copy;
            // translate copy on y axis one unit down
            worldMtxCopy.translateY(-this.unit);
            for (const child of this.container.getChildren()) {
                const childWorldMtxCopy = child.mtxWorld.copy;
                childWorldMtxCopy.translateY(-this.unit);
                for (const collider of colliders) {
                    for (const other of collider.container.getChildren()) {
                        //const cp: ƒ.Vector3 = child.mtxWorld.translation;
                        const op = other.mtxWorld.translation;
                        if (!childWorldMtxCopy.translation.equals(ƒ.Vector3.ZERO()) &&
                            childWorldMtxCopy.translation.isInsideSphere(op, this.unit / 2)) {
                            /*
                            this.removeComponent(newTransform);
                            this.addComponent(negTransform);
                            */
                            // localMtx.translateY(this.unit, false);
                            console.log('bottom');
                            return false;
                        }
                    }
                }
            }
            this.mtxWorld.translateY(-this.unit, true);
            // this.mtxLocal.translateY(-this.unit, false);
            /*
            let transform: ƒ.ComponentTransform = this.getComponent(
                ƒ.ComponentTransform
            );
            
            let matrix: ƒ.Matrix4x4 = transform.mtxLocal.copy;

            let negDir: ƒ.Vector3 = this.dirY.copy;
            negDir.scale(-1);
            let negTrix: ƒ.Matrix4x4 = transform.mtxLocal.copy;

            matrix.translate(this.dirY);
            negTrix.translate(negDir);

            let newTransform: ƒ.ComponentTransform = new ƒ.ComponentTransform(
                matrix
            );
            let negTransform: ƒ.ComponentTransform = new ƒ.ComponentTransform(
                negTrix
            );

            this.removeComponent(transform);
            this.addComponent(newTransform);

            for (let child of this.container.getChildren()) {
                for (let collider of colliders) {
                    for (let other of collider.container.getChildren()) {
                        let cp: ƒ.Vector3 = child.mtxWorld.translation;
                        let op: ƒ.Vector3 = other.mtxWorld.translation;

                        if (
                            !cp.equals(ƒ.Vector3.ZERO()) &&
                            cp.isInsideSphere(op, this.unit / 2)
                        ) {
                            this.removeComponent(newTransform);
                            this.addComponent(negTransform);
                            return false;
                        }
                    }
                }
            }
            return true;
            */
            return true;
        }
        moveX(dirX) {
            dirX.scale(this.unit);
            let transform = this.getComponent(ƒ.ComponentTransform);
            let matrix = transform.mtxLocal.copy;
            matrix.translate(dirX);
            this.removeComponent(transform);
            this.addComponent(new ƒ.ComponentTransform(matrix));
        }
        rotateZ(dir) {
            let transform = this.container.getComponent(ƒ.ComponentTransform);
            let matrix = transform.mtxLocal.copy;
            matrix.rotateZ(dir * 90);
            this.container.removeComponent(transform);
            this.container.addComponent(new ƒ.ComponentTransform(matrix));
        }
        createLine(len, pos = ƒ.Vector3.ZERO()) {
            while (len-- > 0)
                this.createQuad(new ƒ.Vector3(this.unit * len - this.unit + pos.x, 0 + pos.y, 0 + pos.z));
        }
        createLN() {
            this.color = ƒ.Color.CSS('CYAN');
            this.createLine(4, ƒ.Vector3.ZERO());
        }
        createLL() {
            this.color = ƒ.Color.CSS('MAGENTA');
            this.createLine(3);
            this.createQuad(new ƒ.Vector3(-this.unit, this.unit, 0));
        }
        createLR() {
            this.color = ƒ.Color.CSS('YELLOW');
            this.createLine(3);
            this.createQuad(new ƒ.Vector3(this.unit, this.unit, 0));
        }
        createZL() {
            this.color = ƒ.Color.CSS('RED');
            this.createLine(2, new ƒ.Vector3(this.unit, 0, 0));
            this.createLine(2, new ƒ.Vector3(0, 0 + this.unit, 0));
        }
        createZR() {
            this.color = ƒ.Color.CSS('GREEN');
            this.createLine(2);
            this.createLine(2, new ƒ.Vector3(this.unit, 0 + this.unit, 0));
        }
        createSQ() {
            this.color = ƒ.Color.CSS('BLUE');
            this.createLine(2);
            this.createLine(2, new ƒ.Vector3(0, this.unit, 0));
        }
        createTT() {
            this.color = ƒ.Color.CSS('ORANGE');
            this.createLine(3);
            this.createQuad(new ƒ.Vector3(0, 0 + this.unit, 0));
        }
        createQuad(pos) {
            let mesh = new ƒ.MeshQuad();
            let material = new ƒ.Material('Solid' + this.color.getCSS(), ƒ.ShaderUniColor, new ƒ.CoatColored(this.color));
            let segment = new ƒ.Node('Segment');
            let cmpMesh = new ƒ.ComponentMesh(mesh);
            segment.addComponent(cmpMesh);
            let cmpMaterial = new ƒ.ComponentMaterial(material);
            segment.addComponent(cmpMaterial);
            segment.addComponent(new ƒ.ComponentTransform(ƒ.Matrix4x4.TRANSLATION(pos)));
            this.container.appendChild(segment);
        }
    }
    Form.staticUnit = 1.05;
    Tetris.Form = Form;
})(Tetris || (Tetris = {}));
//# sourceMappingURL=data:application/json;base64,